When would you want to use a remote repository rather than keeping all your work local?

Backup purposes - cloud storage is far better in some cases.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Better logical change documentation rather than saving changes that might not have logical changes.  Testing times two.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks - cloning repositories on Github
Clones - cloning local repositories or from Github to local repositories
Branches - a branch off the master branch where code can be modified without further consequence to the master branch

What is the benefit of having a copy of the last known state of the remote stored locally?

If you lose internet connection, that would not be good!  Nice to have local things so development can continue when disconnected.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

What would be easier?  Well, I guess there would be less redundancy... potentially.  It's really hard to say, though.  It's easier to access files locally.  Using Git or GitHub, however, has far more advantages.  Redundancy in your code, so that you never lose.  Ability to work no matter hwere you are.  I think Git / GitHub makes things harder for people to get started because you have to learn an additional application to code in this way (especially when it comes to collaboration) but the benefits far outweigh the initial time cost to learn Git / GitHub.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

If you're working on a feature that can be merged later without consequence to the functionality of the program, then branching is a good way to do this.  Even if it does affect core functionality, this is a way for other team members to operate on code without consequence of what's happening in the main branch.  Merging might become a problem later, but the parallel workings for a team.